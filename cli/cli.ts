import { ethers } from "ethers";
import * as dotenv from "dotenv";
import ComparatorAbi from "../artifacts/contracts/PrivateComparator.sol/PrivateComparator.json";

// ‚¨áÔ∏è –ò–º–ø–æ—Ä—Ç –≤—Å–µ–π fhevmjs –∫–∞–∫ –æ–±—ä–µ–∫—Ç–∞
import * as fhevm from "/root/zama/fhevmjs/lib/node.js";

dotenv.config();

const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS!;
const RPC_URL = process.env.RPC_URL!;
const PRIVATE_KEY = process.env.PRIVATE_KEY!;

async function main() {
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  const contract = new ethers.Contract(CONTRACT_ADDRESS, ComparatorAbi.abi, wallet);

  // ‚¨áÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wasm
  await fhevm.initWasm();

  // ‚¨áÔ∏è –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ encoder –±–µ–∑ RPC
  const encoder = fhevm.buildEncoder({ nBits: 32 });

  const a = 10;
  const b = 20;

  const encA = encoder.encode(a);
  const encB = encoder.encode(b);

  const proofA = fhevm.generatePublicSignature(encA);
  const proofB = fhevm.generatePublicSignature(encB);

  const tx = await contract.setValues(encA, encB, proofA, proofB);
  await tx.wait();

  console.log(`üîê –£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ${a} –∏ ${b}`);
}

main().catch(console.error);
